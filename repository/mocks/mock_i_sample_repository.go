// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockISampleRepository is an autogenerated mock type for the ISampleRepository type
type MockISampleRepository struct {
	mock.Mock
}

type MockISampleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockISampleRepository) EXPECT() *MockISampleRepository_Expecter {
	return &MockISampleRepository_Expecter{mock: &_m.Mock}
}

// CreateSample provides a mock function with given fields:
func (_m *MockISampleRepository) CreateSample() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateSample")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockISampleRepository_CreateSample_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSample'
type MockISampleRepository_CreateSample_Call struct {
	*mock.Call
}

// CreateSample is a helper method to define mock.On call
func (_e *MockISampleRepository_Expecter) CreateSample() *MockISampleRepository_CreateSample_Call {
	return &MockISampleRepository_CreateSample_Call{Call: _e.mock.On("CreateSample")}
}

func (_c *MockISampleRepository_CreateSample_Call) Run(run func()) *MockISampleRepository_CreateSample_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockISampleRepository_CreateSample_Call) Return(_a0 error) *MockISampleRepository_CreateSample_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockISampleRepository_CreateSample_Call) RunAndReturn(run func() error) *MockISampleRepository_CreateSample_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockISampleRepository creates a new instance of MockISampleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockISampleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockISampleRepository {
	mock := &MockISampleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
